df <- rbind(df, read.csv(fileList[i]))
count <- sum(complete.cases(df[which(df$ID == i),]))
nobs <- rbind(nobs,count)
}
return(data.frame(id, count))
}
complete("specdata", 1)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- data.frame()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
nobs <- sum(complete.cases(df[which(df$ID == i),]))
#nobs <- rbind(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12)
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- data.frame()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
nobs <- sum(complete.cases(df[which(df$ID == i),]))
#nobs <- rbind(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", c(2, 4, 8, 10, 12)
complete("specdata", 1)
complete("specdata", 30:25)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- data.frame()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
count <- sum(complete.cases(df[which(df$ID == i),]))
nobs <- rbind(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- data.frame()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
nobs <- sum(complete.cases(df[which(df$ID == i),]))
nobs <- rbind(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- data.frame()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
count <- sum(complete.cases(df[which(df$ID == i),]))
nobs <- rbind(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form: id nobs 1 117 2 1041 ...  where 'id' is
## the monitor ID number and 'nobs' is the number of complete cases
nobs = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- c(id, nobs)
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
count <- sum(complete.cases(df[which(df$ID == i),]))
nobs <- rbind(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- data.frame()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(df[which(df$ID == i),]))
nobs <- rbind(nobs,count)
}
return(data.frame(id, "nobs"))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- data.frame()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(df[which(df$ID == i),]))
nobs <- rbind(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
#nobs = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
#nobs <- data.frame()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(df[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- numeric()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(df[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
fullspecdata <- data.frame()
nobs <- numeric()
for (i in id){
fullspecdata <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(df[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
fullspecdata <- data.frame()
nobs <- numeric()
for (i in id){
fullspecdata <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(fullspecdata[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
df <- data.frame()
nobs <- numeric()
for (i in id){
df <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(df[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
fullspecdata <- data.frame()
nobs <- numeric()
for (i in id){
fullspecdata <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(fullspecdata[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
fullspecdata <- data.frame()
nobs <- numeric()
for (i in id){
fullspecdata <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(fullspecdata[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
fullspecdata <- data.frame()
nobs <- numeric()
for (i in id){
fullspecdata <- rbind(df, read.csv(fileList[i]))
count<- sum(complete.cases(fullspecdata[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
fullspecdata <- data.frame()
nobs <- numeric()
for (i in id){
fullspecdata <- rbind(fullspecdata, read.csv(fileList[i]))
count<- sum(complete.cases(fullspecdata[which(df$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332){
fileList <- list.files(directory, full.names = TRUE)
fullspecdata <- data.frame()
nobs <- numeric()
for (i in id){
fullspecdata <- rbind(fullspecdata, read.csv(fileList[i]))
count<- sum(complete.cases(fullspecdata[which(fullspecdata$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332)
{
fileList <- list.files(directory, full.names = TRUE)
fullspecdata <- data.frame()
nobs <- numeric()
for (i in id)
{
fullspecdata <- rbind(fullspecdata, read.csv(fileList[i]))
count<- sum(complete.cases(fullspecdata[which(fullspecdata$ID == i),]))
nobs <- c(nobs,count)
}
return(data.frame(id, nobs))
}
complete("specdata", 30:25)
http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R
"http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R"
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit
submit()
submit()
submit()
x <- list (a=1:5, b = rnorm(10))
lapply(x, mean)
$a
x <- list (a=1:5, b = rnorm(10))
lapply(x, mean)
x <- list (a=1:5, b = rnorm(10))
lapply(x, mean)
x <- list (a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list (a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list (a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list (a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list (a = 1:4, b = rnorm(10), c = rnorm(20, 1). d = rnorm(100, 5))
lapply(x, mean)
x <- list (a = 1:4, b = rnorm(10), c = rnorm(20, 1). d = rnorm(100, 5))
lapply(x, mean)
x <- list (a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- list (a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- list (a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x<- 1:4
lapply (x, runif, min =0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b= matrix(1:6, 3, 2))
x
x <- list(a = matrix(1:4, 2, 2), b= matrix(1:6, 3, 2))
x
## anonymous function for extracting the first coloum of each matrix
lapply(x, function(elt) elt[,1])
x
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
?rnorm
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
str(apply)
function (X, MARGIN, FUN, ...)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, sum)
x<- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
list(rep(1, 4), rep(2, 3), rep(3, 2), rep (4, 1))
mapply (rep, 1:4, 4:1)
noise(5, 1, 2)
noise <-function (n, mean, sd){
rnorm(n, mean, sd)
}
noise(5, 1, 2)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- g1(3, 10)
f
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- g1(3, 10)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
$1
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <-gl(3, 10)
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
s <- split(airquality, airquality$Month)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
s <- split(airquality, airquality$Month)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
x <-rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
fl
x <-rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
x
intersection (f1, f2)
intersection(f1, f2)
interaction(f1, f2)
s <- split(airquality, airquality$Month)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
##5         6          7          8         9
##Ozone    23.61538  29.44444  59.115385  59.961538  31.44828
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop + TRUE))
str(split(x, list(f1, f2), drop = TRUE))
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
getwd
getwd()
setwd("Class2Prog2")
ggetwd()
getwd()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
source("cachematrix.R")
getwd()
setwd(ProgrammingAssignment2)
setwd("ProgrammingAssignment2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
?solve
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
?makecachematrix
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
source("cachematrix.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrix.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrixinv.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrixinv.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrixinv.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrixinv.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrixinv.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrix.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrixinv.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
source("cachematrixinv.R")
ProgAssn2matrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ProgAssn2matrix$get()
cacheSolve(ProgAssn2matrix)
